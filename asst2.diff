diff --git a/kern/arch/mips/mips/syscall.c b/kern/arch/mips/mips/syscall.c
index 60e431d..5e4e863 100644
--- a/kern/arch/mips/mips/syscall.c
+++ b/kern/arch/mips/mips/syscall.c
@@ -73,7 +73,15 @@ mips_syscall(struct trapframe *tf)
 		break;
 
 	    /* Add stuff here */
- 
+	    case SYS_fork:
+		err = sys_fork(tf, &retval);
+		break;
+	    /* Dargo Added */
+
+	    case SYS_getpid:
+		err = sys_getpid(&retval);
+		break;
+	 
 	    default:
 		kprintf("Unknown syscall %d\n", callno);
 		err = ENOSYS;
@@ -116,6 +124,9 @@ md_forkentry(struct trapframe *tf)
 	 *
 	 * Thus, you can trash it and do things another way if you prefer.
 	 */
-
+	tf->tf_v0 = 0;
+	tf->tf_a3 = 0;
+	tf->tf_epc += 4;
+	mips_usermode(tf);
 	(void)tf;
 }
diff --git a/kern/compile/ASST2/Makefile b/kern/compile/ASST2/Makefile
new file mode 100644
index 0000000..3e24232
--- /dev/null
+++ b/kern/compile/ASST2/Makefile
@@ -0,0 +1,196 @@
+# Automatically generated by config.
+# Edit arch/mips/conf/Makefile.mips instead, and rerun config.
+#
+
+#
+# Makefile.mips
+#
+# OS/161 kernel makefile base for the MIPS r2000/r3000.
+#
+# The actual makefiles used are copies of this file - if you want to edit,
+# edit kern/arch/mips/conf/Makefile.mips and rerun config.
+#
+
+
+#
+# Filename for the kernel.
+#
+KERNEL=kernel
+
+#
+# Get the defs that were dumped out from the kernel config tool.
+# This defines:
+#	S		Path for top of kernel source tree
+#	ARCH		Architecture ("mips")
+#	DEBUGFLAGS	-O2 or -g
+#	CONFNAME	The name of the kernel config, e.g., ASST1
+#
+include defs.mk
+
+#
+# Get the tree-wide defs.
+# This defines (that we use):
+#	OSTREE		Path for top of installed system tree
+#	CC		C compiler
+#	KCFLAGS		C compiler flags for kernel
+#	LD		Linker
+#	KLDFLAGS	Linker flags for kernel
+#	SIZE		Object file size tool
+#
+include $S/../defs.mk
+
+#
+# Adjust defs for building the kernel.
+#
+# The LOAD_ADDRESS is the virtual address where the kernel will be loaded
+# into memory. This is in the direct-mapped cached segment of the MIPS
+# address space. -Ttext is the linker option for setting it.
+#
+# -T provides the linker with a "linker script". This is a piece of
+# obscure mumble that tells the linker how to put together the output
+# program. The only reason we need it is that the linker breaks if you
+# try to use -Ttext and its default built-in linker script at the same
+# time.
+#
+# -nostdinc prevents including header files other than our own, and 
+# -nostdlib prevents linking against any standard libraries. Because
+# the kernel has to be a completely standalone program, this is important.
+#
+# -ffreestanding tells gcc this is not an ordinary program, so it will
+# make fewer unwise assumptions about standard library functions.
+#
+# We define _KERNEL so certain source files that are shared between the
+# kernel and userland (like strcpy.c) can tell the difference so they know
+# which header files to use.
+#
+# -G 0 tells the assembler and linker not to reference global variables
+# via the "global pointer" (MIPS gp register) because we don't support 
+# handling the gp register.
+#
+LOAD_ADDRESS=0x80001000
+INCLUDES=-nostdinc -I$S/include -I$S/dev -I. 
+CFLAGS=$(KCFLAGS) $(DEBUGFLAGS) $(INCLUDES) -ffreestanding -D_KERNEL -G 0
+LDFLAGS=$(KLDFLAGS) -nostdlib \
+	-Ttext $(LOAD_ADDRESS) -T $S/arch/mips/conf/ldscript \
+	-G 0
+
+#
+# Rules for compiling various kinds of source files, by suffix.
+# (There's nothing magical about these names and make.)
+#
+# We don't actually use C++ in OS/161, although, with some fiddling,
+# you might be able to. But you must turn off exceptions and RTTI in
+# order to do so (the implementations of these in gcc are completely 
+# unsuitable for kernels.)
+#
+COMPILE.cc=$(CC) $(CFLAGS) -fno-rtti -fno-exceptions -c
+COMPILE.c=$(CC) $(CFLAGS) -c
+COMPILE.l=false   # redefine when needed 
+COMPILE.y=false   # redefine when needed 
+COMPILE.S=$(CC) $(CFLAGS) -c
+
+#
+# This should expand to all the header files in the kernel so they can
+# be fed to tags.
+#
+TAGS_HEADERS=$S/include/*.h $S/include/kern/*.h $S/arch/$(ARCH)/include/*.h
+
+#
+# Default make rule: build the kernel.
+#
+all: $(KERNEL)
+
+#
+# Here's how we link the kernel. 
+#
+# vers.c/.o is generated on every build. It contains a numeric serial
+# number incremented every time newvers.sh is run.  These values are
+# printed out by newvers.sh and are also displayed at boot time. This
+# makes it possible to tell at a glance whether you're actually
+# running the same kernel you just compiled.
+#
+# The version number is kept in the file called "version" in the build
+# directory.
+#
+# By immemorial tradition, "size" is run on the kernel after it's linked.
+#
+$(KERNEL):
+	$S/conf/newvers.sh $(CONFNAME)
+	$(COMPILE.c) vers.c
+	$(LD) $(LDFLAGS) $(OBJS) vers.o -o $(KERNEL)
+	$(SIZE) $(KERNEL)
+
+#
+# Use the -M argument to gcc to get it to output dependency information.
+# Note that we use -M, which includes deps for #include <...> files,
+# rather than -MM, which doesn't. This is because we are the operating
+# system: the #include <...> files are part of our project - in fact, in
+# the kernel they're the kernel's own include files - and they will be
+# changing!
+#
+depend:
+	$(CC) $(CFLAGS) -M $(SRCS) > depend.mk
+
+#
+# Remove everything generated during the compile.
+# (To remove absolutely everything automatically generated, you can just
+# blow away the whole compile directory.)
+#
+clean:
+	rm -f *.o *.a tags $(KERNEL)
+
+#
+# Rerun config for this configuration.
+#
+reconfig:
+	(cd ../../conf && ./config $(CONFNAME))
+
+#
+# [ -d $(OSTREE) ] succeeds if $(OSTREE) is a directory.
+# (See test(1).) Thus, if $(OSTREE) doesn't exist, it will be created.
+#
+
+# The kernel gets installed at the top of the installed system tree.
+# Since with OS/161 it's relatively likely that you'll be working with
+# several configurations at once, it gets installed under the name of
+# this config, and a symbolic link with the "real" name is set up to
+# point to the last kernel installed.
+#
+install:
+	[ -d $(OSTREE) ] || mkdir $(OSTREE)
+	cp $(KERNEL) $(OSTREE)/$(KERNEL)-$(CONFNAME)
+	-rm -f $(OSTREE)/$(KERNEL)
+	ln -s $(KERNEL)-$(CONFNAME) $(OSTREE)/$(KERNEL)
+
+#
+# Run tags on all the sources and header files. This is probably not
+# the most useful way to do this and needs attention. (XXX)
+#
+tags:
+	ctags -wtd $(SRCS) $(TAGS_HEADERS)
+
+#
+# This tells make that these rules are not files so it (hopefully)
+# won't become confused if files by those names appear.
+#
+.PHONY: all depend clean install tags reconfig
+
+#
+# Get the list of source files from where it was generated by the 
+# kernel config tool.
+#
+# This sets SRCS and OBJS, and also defines a rule for compiling each
+# source file.
+#
+include files.mk
+
+# Get dependency information.
+include depend.mk
+
+#
+# Tell make that the kernel depends on the object files listed in $(OBJS).
+# This (unlike the link commands that also use $(OBJS) above) must come
+# after the include of files.mk, because of the way make reads its input
+# and evaluates variables.
+#
+$(KERNEL): $(OBJS)
diff --git a/kern/compile/ASST2/__printf.o b/kern/compile/ASST2/__printf.o
new file mode 100644
index 0000000..3018201
Binary files /dev/null and b/kern/compile/ASST2/__printf.o differ
diff --git a/kern/compile/ASST2/array.o b/kern/compile/ASST2/array.o
new file mode 100644
index 0000000..663db9d
Binary files /dev/null and b/kern/compile/ASST2/array.o differ
diff --git a/kern/compile/ASST2/arraytest.o b/kern/compile/ASST2/arraytest.o
new file mode 100644
index 0000000..ffbe2e3
Binary files /dev/null and b/kern/compile/ASST2/arraytest.o differ
diff --git a/kern/compile/ASST2/atoi.o b/kern/compile/ASST2/atoi.o
new file mode 100644
index 0000000..6e1fbeb
Binary files /dev/null and b/kern/compile/ASST2/atoi.o differ
diff --git a/kern/compile/ASST2/autoconf.c b/kern/compile/ASST2/autoconf.c
new file mode 100644
index 0000000..c9cdf87
--- /dev/null
+++ b/kern/compile/ASST2/autoconf.c
@@ -0,0 +1,455 @@
+/* Automatically generated; do not edit */
+#include <types.h>
+#include <lib.h>
+#include "autoconf.h"
+
+static void autoconf_beep(struct beep_softc *, int);
+static void autoconf_con(struct con_softc *, int);
+static void autoconf_emu(struct emu_softc *, int);
+static void autoconf_lhd(struct lhd_softc *, int);
+static void autoconf_lrandom(struct lrandom_softc *, int);
+static void autoconf_lser(struct lser_softc *, int);
+static void autoconf_ltimer(struct ltimer_softc *, int);
+static void autoconf_ltrace(struct ltrace_softc *, int);
+static void autoconf_pseudorand(struct pseudorand_softc *, int);
+static void autoconf_random(struct random_softc *, int);
+static void autoconf_rtclock(struct rtclock_softc *, int);
+static int nextunit_beep;
+static int nextunit_con;
+static int nextunit_emu;
+static int nextunit_lhd;
+static int nextunit_lrandom;
+static int nextunit_lser;
+static int nextunit_ltimer;
+static int nextunit_ltrace;
+static int nextunit_random;
+static int nextunit_rtclock;
+
+static
+int
+tryattach_emu_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct emu_softc *dev;
+	int result;
+
+	dev = attach_emu_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("emu%d at lamebus%d", devunit, busunit);
+	result = config_emu(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_emu = devunit+1;
+	autoconf_emu(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltrace_softc *dev;
+	int result;
+
+	dev = attach_ltrace_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltrace%d at lamebus%d", devunit, busunit);
+	result = config_ltrace(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltrace = devunit+1;
+	autoconf_ltrace(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltimer_softc *dev;
+	int result;
+
+	dev = attach_ltimer_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltimer%d at lamebus%d", devunit, busunit);
+	result = config_ltimer(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltimer = devunit+1;
+	autoconf_ltimer(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lrandom_softc *dev;
+	int result;
+
+	dev = attach_lrandom_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lrandom%d at lamebus%d", devunit, busunit);
+	result = config_lrandom(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lrandom = devunit+1;
+	autoconf_lrandom(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lhd_softc *dev;
+	int result;
+
+	dev = attach_lhd_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lhd%d at lamebus%d", devunit, busunit);
+	result = config_lhd(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lhd = devunit+1;
+	autoconf_lhd(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lser_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lser_softc *dev;
+	int result;
+
+	dev = attach_lser_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lser%d at lamebus%d", devunit, busunit);
+	result = config_lser(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lser = devunit+1;
+	autoconf_lser(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_beep_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct beep_softc *dev;
+	int result;
+
+	dev = attach_beep_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("beep%d at ltimer%d", devunit, busunit);
+	result = config_beep(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_beep = devunit+1;
+	autoconf_beep(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_con_to_lser(int devunit, struct lser_softc *bus, int busunit)
+{
+	struct con_softc *dev;
+	int result;
+
+	dev = attach_con_to_lser(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("con%d at lser%d", devunit, busunit);
+	result = config_con(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_con = devunit+1;
+	autoconf_con(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct rtclock_softc *dev;
+	int result;
+
+	dev = attach_rtclock_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("rtclock%d at ltimer%d", devunit, busunit);
+	result = config_rtclock(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_rtclock = devunit+1;
+	autoconf_rtclock(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_lrandom(int devunit, struct lrandom_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_lrandom(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at lrandom%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_pseudorand(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at pseudorand%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+
+static
+void
+autoconf_con(struct con_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lser(struct lser_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_con <= 0) {
+			tryattach_con_to_lser(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_lhd(struct lhd_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_emu(struct emu_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+autoconf_pseudorand(struct pseudorand_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	if (busunit==0) {
+		if (nextunit_random <= 0) {
+			tryattach_random_to_pseudorand(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_random(struct random_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltimer(struct ltimer_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_beep <= 0) {
+			tryattach_beep_to_ltimer(0, bus, busunit);
+		}
+	}
+	{
+		if (nextunit_rtclock <= 0) {
+			tryattach_rtclock_to_ltimer(0, bus, busunit);
+		}
+	}
+}
+
+void
+autoconf_lamebus(struct lamebus_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		int result, devunit=nextunit_emu;
+		do {
+			result = tryattach_emu_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltrace;
+		do {
+			result = tryattach_ltrace_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltimer;
+		do {
+			result = tryattach_ltimer_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lrandom;
+		do {
+			result = tryattach_lrandom_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lhd;
+		do {
+			result = tryattach_lhd_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lser;
+		do {
+			result = tryattach_lser_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+}
+
+static
+void
+autoconf_beep(struct beep_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lrandom(struct lrandom_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_random <= 0) {
+			tryattach_random_to_lrandom(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_rtclock(struct rtclock_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltrace(struct ltrace_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+pseudoconfig(void)
+{
+	{
+		struct pseudorand_softc *s;
+		
+		s = pseudoattach_pseudorand(0);
+		if (s!=NULL) {
+			kprintf("pseudorand0 (virtual)\n");
+			autoconf_pseudorand(s, 0);
+		}
+	}
+}
+
diff --git a/kern/compile/ASST2/autoconf.h b/kern/compile/ASST2/autoconf.h
new file mode 100644
index 0000000..13ab76c
--- /dev/null
+++ b/kern/compile/ASST2/autoconf.h
@@ -0,0 +1,48 @@
+/* Automatically generated; do not edit */
+#ifndef _AUTOCONF_H_
+#define _AUTOCONF_H_
+
+struct lamebus_softc;
+struct emu_softc;
+struct ltrace_softc;
+struct ltimer_softc;
+struct lrandom_softc;
+struct lhd_softc;
+struct lser_softc;
+struct beep_softc;
+struct con_softc;
+struct rtclock_softc;
+struct random_softc;
+struct pseudorand_softc;
+struct random_softc;
+
+void autoconf_lamebus(struct lamebus_softc *dev, int unit);
+
+struct emu_softc *attach_emu_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltrace_softc *attach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltimer_softc *attach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lrandom_softc *attach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lhd_softc *attach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lser_softc *attach_lser_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct beep_softc *attach_beep_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct con_softc *attach_con_to_lser(int devunit, struct lser_softc *bus);
+struct rtclock_softc *attach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct random_softc *attach_random_to_lrandom(int devunit, struct lrandom_softc *bus);
+struct pseudorand_softc *pseudoattach_pseudorand(int devunit);
+struct random_softc *attach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus);
+
+int config_emu(struct emu_softc *dev, int unit);
+int config_ltrace(struct ltrace_softc *dev, int unit);
+int config_ltimer(struct ltimer_softc *dev, int unit);
+int config_lrandom(struct lrandom_softc *dev, int unit);
+int config_lhd(struct lhd_softc *dev, int unit);
+int config_lser(struct lser_softc *dev, int unit);
+int config_beep(struct beep_softc *dev, int unit);
+int config_con(struct con_softc *dev, int unit);
+int config_rtclock(struct rtclock_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+
+void pseudoconfig(void);
+
+#endif /* _AUTOCONF_H_ */
diff --git a/kern/compile/ASST2/autoconf.o b/kern/compile/ASST2/autoconf.o
new file mode 100644
index 0000000..f8e78fa
Binary files /dev/null and b/kern/compile/ASST2/autoconf.o differ
diff --git a/kern/compile/ASST2/beep.o b/kern/compile/ASST2/beep.o
new file mode 100644
index 0000000..d21f10e
Binary files /dev/null and b/kern/compile/ASST2/beep.o differ
diff --git a/kern/compile/ASST2/beep_ltimer.o b/kern/compile/ASST2/beep_ltimer.o
new file mode 100644
index 0000000..0b02d2a
Binary files /dev/null and b/kern/compile/ASST2/beep_ltimer.o differ
diff --git a/kern/compile/ASST2/bitmap.o b/kern/compile/ASST2/bitmap.o
new file mode 100644
index 0000000..06eea89
Binary files /dev/null and b/kern/compile/ASST2/bitmap.o differ
diff --git a/kern/compile/ASST2/bitmaptest.o b/kern/compile/ASST2/bitmaptest.o
new file mode 100644
index 0000000..f780204
Binary files /dev/null and b/kern/compile/ASST2/bitmaptest.o differ
diff --git a/kern/compile/ASST2/bzero.o b/kern/compile/ASST2/bzero.o
new file mode 100644
index 0000000..72ad124
Binary files /dev/null and b/kern/compile/ASST2/bzero.o differ
diff --git a/kern/compile/ASST2/cache_mips1.o b/kern/compile/ASST2/cache_mips1.o
new file mode 100644
index 0000000..198ec09
Binary files /dev/null and b/kern/compile/ASST2/cache_mips1.o differ
diff --git a/kern/compile/ASST2/con_lser.o b/kern/compile/ASST2/con_lser.o
new file mode 100644
index 0000000..6f40be4
Binary files /dev/null and b/kern/compile/ASST2/con_lser.o differ
diff --git a/kern/compile/ASST2/console.o b/kern/compile/ASST2/console.o
new file mode 100644
index 0000000..5a63fac
Binary files /dev/null and b/kern/compile/ASST2/console.o differ
diff --git a/kern/compile/ASST2/copyinout.o b/kern/compile/ASST2/copyinout.o
new file mode 100644
index 0000000..2de79b9
Binary files /dev/null and b/kern/compile/ASST2/copyinout.o differ
diff --git a/kern/compile/ASST2/defs.mk b/kern/compile/ASST2/defs.mk
new file mode 100644
index 0000000..25998b2
--- /dev/null
+++ b/kern/compile/ASST2/defs.mk
@@ -0,0 +1,5 @@
+# Automatically generated by config; do not edit
+S=../..
+ARCH=mips
+DEBUGFLAGS=-g
+CONFNAME=ASST2
diff --git a/kern/compile/ASST2/depend.mk b/kern/compile/ASST2/depend.mk
new file mode 100644
index 0000000..8b33c43
--- /dev/null
+++ b/kern/compile/ASST2/depend.mk
@@ -0,0 +1,362 @@
+console.o: ../../dev/generic/console.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/spl.h \
+  ../../include/synch.h ../../dev/generic/console.h ../../include/dev.h \
+  ../../include/vfs.h ../../include/uio.h autoconf.h
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/array.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/emufs.h ../../include/vnode.h ../../include/fs.h \
+  ../../dev/lamebus/emu.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h autoconf.h
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lser.h autoconf.h
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../include/uio.h \
+  ../../include/vfs.h ../../dev/lamebus/lhd.h ../../include/dev.h \
+  autoconf.h
+pseudorand.o: ../../dev/generic/pseudorand.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h ../../dev/generic/pseudorand.h \
+  autoconf.h
+random.o: ../../dev/generic/random.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/vfs.h ../../dev/generic/random.h \
+  ../../include/dev.h autoconf.h
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/clock.h opt-synchprobs.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../dev/lamebus/lamebus.h
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../dev/lamebus/lrandom.h autoconf.h
+beep.o: ../../dev/generic/beep.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/beep.h \
+  autoconf.h
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/ltrace.h autoconf.h
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../dev/generic/rtclock.h autoconf.h
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lhd.h \
+  ../../include/dev.h autoconf.h
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/lamebus/lrandom.h autoconf.h
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/rtclock.h \
+  ../../dev/lamebus/ltimer.h autoconf.h
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltrace.h \
+  autoconf.h
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lrandom.h autoconf.h
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/emu.h \
+  autoconf.h
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+pseudorand_att.o: ../../dev/generic/pseudorand_att.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/generic/pseudorand.h autoconf.h
+sfs_vnode.o: ../../fs/sfs/sfs_vnode.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/array.h \
+  ../../include/bitmap.h ../../include/kern/stat.h \
+  ../../include/kern/errno.h ../../include/kern/unistd.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h
+sfs_fs.o: ../../fs/sfs/sfs_fs.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h ../../include/bitmap.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h \
+  ../../include/vfs.h
+dumbvm.o: ../../arch/mips/mips/dumbvm.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h ../../include/addrspace.h \
+  ../../include/vm.h machine/vm.h opt-dumbvm.h machine/spl.h \
+  machine/tlb.h
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/dev.h
+cache_mips1.o: ../../arch/mips/mips/cache_mips1.S machine/asmdefs.h
+exception.o: ../../arch/mips/mips/exception.S machine/asmdefs.h \
+  machine/specialreg.h
+lamebus_mips.o: ../../arch/mips/mips/lamebus_mips.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  machine/spl.h machine/pcb.h ../../include/dev.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h autoconf.h
+interrupt.o: ../../arch/mips/mips/interrupt.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  machine/spl.h machine/pcb.h
+pcb.o: ../../arch/mips/mips/pcb.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/pcb.h machine/spl.h machine/switchframe.h \
+  ../../include/thread.h
+ram.o: ../../arch/mips/mips/ram.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/pcb.h
+spl.o: ../../arch/mips/mips/spl.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/specialreg.h
+start.o: ../../arch/mips/mips/start.S machine/asmdefs.h \
+  machine/specialreg.h
+switch.o: ../../arch/mips/mips/switch.S machine/asmdefs.h
+syscall.o: ../../arch/mips/mips/syscall.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h machine/spl.h \
+  machine/trapframe.h ../../include/kern/callno.h ../../include/syscall.h
+threadstart.o: ../../arch/mips/mips/threadstart.S machine/asmdefs.h
+trap.o: ../../arch/mips/mips/trap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/trapframe.h machine/specialreg.h machine/pcb.h machine/spl.h \
+  ../../include/vm.h machine/vm.h ../../include/thread.h \
+  ../../include/curthread.h
+tlb_mips1.o: ../../arch/mips/mips/tlb_mips1.S machine/asmdefs.h \
+  machine/specialreg.h
+mips-setjmp.o: ../../../lib/libc/mips-setjmp.S machine/asmdefs.h
+copyinout.o: ../../lib/copyinout.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h ../../include/vm.h \
+  machine/vm.h ../../include/thread.h ../../include/curthread.h
+array.o: ../../lib/array.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/array.h
+bitmap.o: ../../lib/bitmap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/bitmap.h
+queue.o: ../../lib/queue.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/queue.h
+kheap.o: ../../lib/kheap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/spl.h
+kprintf.o: ../../lib/kprintf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/stdarg.h ../../include/lib.h \
+  machine/setjmp.h ../../include/kern/unistd.h ../../include/synch.h \
+  ../../include/vfs.h ../../include/thread.h machine/pcb.h machine/spl.h
+kgets.o: ../../lib/kgets.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+misc.o: ../../lib/misc.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errmsg.h \
+  ../../include/lib.h machine/setjmp.h
+ntoh.o: ../../lib/ntoh.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+__printf.o: ../../../lib/libc/__printf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+snprintf.o: ../../../lib/libc/snprintf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+atoi.o: ../../../lib/libc/atoi.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+bzero.o: ../../../lib/libc/bzero.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+memcpy.o: ../../../lib/libc/memcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+memmove.o: ../../../lib/libc/memmove.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcat.o: ../../../lib/libc/strcat.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strchr.o: ../../../lib/libc/strchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcmp.o: ../../../lib/libc/strcmp.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcpy.o: ../../../lib/libc/strcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strlen.o: ../../../lib/libc/strlen.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strrchr.o: ../../../lib/libc/strrchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strtok_r.o: ../../../lib/libc/strtok_r.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+init.o: ../../dev/init.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/dev.h autoconf.h
+device.o: ../../fs/vfs/device.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/dev.h
+vfscwd.o: ../../fs/vfs/vfscwd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/stat.h ../../include/vfs.h ../../include/fs.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h
+vfslist.o: ../../fs/vfs/vfslist.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/array.h ../../include/kern/errno.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/dev.h
+vfslookup.o: ../../fs/vfs/vfslookup.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/vfs.h ../../include/vnode.h \
+  ../../include/fs.h
+vfspath.o: ../../fs/vfs/vfspath.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/kern/unistd.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/lib.h \
+  machine/setjmp.h
+vnode.o: ../../fs/vfs/vnode.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/vnode.h
+devnull.o: ../../fs/vfs/devnull.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/vfs.h \
+  ../../include/dev.h ../../include/uio.h
+hardclock.o: ../../thread/hardclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../include/thread.h machine/pcb.h \
+  ../../include/clock.h opt-synchprobs.h
+synch.o: ../../thread/synch.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h machine/spl.h
+scheduler.o: ../../thread/scheduler.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/scheduler.h ../../include/thread.h \
+  machine/pcb.h machine/spl.h ../../include/queue.h
+thread.o: ../../thread/thread.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h machine/spl.h \
+  machine/pcb.h ../../include/thread.h ../../include/curthread.h \
+  ../../include/scheduler.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h ../../include/vnode.h opt-synchprobs.h \
+  ../../include/pid.h
+pid.o: ../../thread/pid.c ../../include/pid.h ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/synch.h \
+  ../../include/thread.h machine/pcb.h machine/setjmp.h \
+  ../../include/lib.h ../../include/curthread.h \
+  ../../include/kern/limits.h
+main.o: ../../main/main.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/test.h ../../include/synch.h \
+  ../../include/thread.h machine/pcb.h ../../include/scheduler.h \
+  ../../include/dev.h ../../include/vfs.h ../../include/vm.h machine/vm.h \
+  ../../include/syscall.h ../../include/version.h
+menu.o: ../../main/menu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/limits.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../include/thread.h machine/pcb.h \
+  ../../include/syscall.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/test.h opt-synchprobs.h \
+  opt-sfs.h opt-net.h
+loadelf.o: ../../userprog/loadelf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/elf.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h ../../include/vnode.h
+runprogram.o: ../../userprog/runprogram.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/kern/errno.h ../../include/lib.h machine/setjmp.h \
+  ../../include/addrspace.h ../../include/vm.h machine/vm.h opt-dumbvm.h \
+  ../../include/thread.h machine/pcb.h ../../include/curthread.h \
+  ../../include/vfs.h ../../include/test.h
+uio.o: ../../userprog/uio.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h
+prog_syscall.o: ../../userprog/prog_syscall.c ../../include/kern/errno.h \
+  ../../include/pid.h ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/syscall.h \
+  ../../include/thread.h machine/pcb.h machine/setjmp.h \
+  ../../include/curthread.h machine/trapframe.h ../../include/lib.h
+getpid_syscall.o: ../../userprog/getpid_syscall.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/syscall.h \
+  ../../include/thread.h machine/pcb.h machine/setjmp.h \
+  ../../include/curthread.h ../../include/pid.h
+arraytest.o: ../../test/arraytest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/array.h ../../include/test.h
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/bitmap.h ../../include/test.h
+queuetest.o: ../../test/queuetest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/queue.h ../../include/test.h
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+tt3.o: ../../test/tt3.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h opt-synchprobs.h
+synchtest.o: ../../test/synchtest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/test.h ../../include/clock.h opt-synchprobs.h
+malloctest.o: ../../test/malloctest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+fstest.o: ../../test/fstest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/fs.h ../../include/vnode.h \
+  ../../include/vfs.h ../../include/uio.h ../../include/test.h \
+  ../../include/thread.h machine/pcb.h
+autoconf.o: ../../compile/ASST2/autoconf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../compile/ASST2/autoconf.h
diff --git a/kern/compile/ASST2/device.o b/kern/compile/ASST2/device.o
new file mode 100644
index 0000000..c85d50a
Binary files /dev/null and b/kern/compile/ASST2/device.o differ
diff --git a/kern/compile/ASST2/devnull.o b/kern/compile/ASST2/devnull.o
new file mode 100644
index 0000000..315c8b2
Binary files /dev/null and b/kern/compile/ASST2/devnull.o differ
diff --git a/kern/compile/ASST2/dumbvm.o b/kern/compile/ASST2/dumbvm.o
new file mode 100644
index 0000000..2d12f86
Binary files /dev/null and b/kern/compile/ASST2/dumbvm.o differ
diff --git a/kern/compile/ASST2/emu.o b/kern/compile/ASST2/emu.o
new file mode 100644
index 0000000..cecf6e0
Binary files /dev/null and b/kern/compile/ASST2/emu.o differ
diff --git a/kern/compile/ASST2/emu_att.o b/kern/compile/ASST2/emu_att.o
new file mode 100644
index 0000000..b494c6c
Binary files /dev/null and b/kern/compile/ASST2/emu_att.o differ
diff --git a/kern/compile/ASST2/exception.o b/kern/compile/ASST2/exception.o
new file mode 100644
index 0000000..0cba820
Binary files /dev/null and b/kern/compile/ASST2/exception.o differ
diff --git a/kern/compile/ASST2/files.mk b/kern/compile/ASST2/files.mk
new file mode 100644
index 0000000..f1d8b97
--- /dev/null
+++ b/kern/compile/ASST2/files.mk
@@ -0,0 +1,461 @@
+# Automatically generated by config; do not edit
+console.o: ${S}/dev/generic/console.c
+	${COMPILE.c} ${S}/dev/generic/console.c
+SRCS+=${S}/dev/generic/console.c
+OBJS+=console.o
+
+emu.o: ${S}/dev/lamebus/emu.c
+	${COMPILE.c} ${S}/dev/lamebus/emu.c
+SRCS+=${S}/dev/lamebus/emu.c
+OBJS+=emu.o
+
+lser.o: ${S}/dev/lamebus/lser.c
+	${COMPILE.c} ${S}/dev/lamebus/lser.c
+SRCS+=${S}/dev/lamebus/lser.c
+OBJS+=lser.o
+
+lhd.o: ${S}/dev/lamebus/lhd.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd.c
+SRCS+=${S}/dev/lamebus/lhd.c
+OBJS+=lhd.o
+
+pseudorand.o: ${S}/dev/generic/pseudorand.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand.c
+SRCS+=${S}/dev/generic/pseudorand.c
+OBJS+=pseudorand.o
+
+random.o: ${S}/dev/generic/random.c
+	${COMPILE.c} ${S}/dev/generic/random.c
+SRCS+=${S}/dev/generic/random.c
+OBJS+=random.o
+
+ltimer.o: ${S}/dev/lamebus/ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer.c
+SRCS+=${S}/dev/lamebus/ltimer.c
+OBJS+=ltimer.o
+
+lamebus.o: ${S}/dev/lamebus/lamebus.c
+	${COMPILE.c} ${S}/dev/lamebus/lamebus.c
+SRCS+=${S}/dev/lamebus/lamebus.c
+OBJS+=lamebus.o
+
+lrandom.o: ${S}/dev/lamebus/lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom.c
+SRCS+=${S}/dev/lamebus/lrandom.c
+OBJS+=lrandom.o
+
+beep.o: ${S}/dev/generic/beep.c
+	${COMPILE.c} ${S}/dev/generic/beep.c
+SRCS+=${S}/dev/generic/beep.c
+OBJS+=beep.o
+
+ltrace.o: ${S}/dev/lamebus/ltrace.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace.c
+SRCS+=${S}/dev/lamebus/ltrace.c
+OBJS+=ltrace.o
+
+rtclock.o: ${S}/dev/generic/rtclock.c
+	${COMPILE.c} ${S}/dev/generic/rtclock.c
+SRCS+=${S}/dev/generic/rtclock.c
+OBJS+=rtclock.o
+
+ltimer_att.o: ${S}/dev/lamebus/ltimer_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer_att.c
+SRCS+=${S}/dev/lamebus/ltimer_att.c
+OBJS+=ltimer_att.o
+
+con_lser.o: ${S}/dev/lamebus/con_lser.c
+	${COMPILE.c} ${S}/dev/lamebus/con_lser.c
+SRCS+=${S}/dev/lamebus/con_lser.c
+OBJS+=con_lser.o
+
+lhd_att.o: ${S}/dev/lamebus/lhd_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd_att.c
+SRCS+=${S}/dev/lamebus/lhd_att.c
+OBJS+=lhd_att.o
+
+random_lrandom.o: ${S}/dev/lamebus/random_lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/random_lrandom.c
+SRCS+=${S}/dev/lamebus/random_lrandom.c
+OBJS+=random_lrandom.o
+
+rtclock_ltimer.o: ${S}/dev/lamebus/rtclock_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/rtclock_ltimer.c
+SRCS+=${S}/dev/lamebus/rtclock_ltimer.c
+OBJS+=rtclock_ltimer.o
+
+ltrace_att.o: ${S}/dev/lamebus/ltrace_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace_att.c
+SRCS+=${S}/dev/lamebus/ltrace_att.c
+OBJS+=ltrace_att.o
+
+lser_att.o: ${S}/dev/lamebus/lser_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lser_att.c
+SRCS+=${S}/dev/lamebus/lser_att.c
+OBJS+=lser_att.o
+
+lrandom_att.o: ${S}/dev/lamebus/lrandom_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom_att.c
+SRCS+=${S}/dev/lamebus/lrandom_att.c
+OBJS+=lrandom_att.o
+
+emu_att.o: ${S}/dev/lamebus/emu_att.c
+	${COMPILE.c} ${S}/dev/lamebus/emu_att.c
+SRCS+=${S}/dev/lamebus/emu_att.c
+OBJS+=emu_att.o
+
+beep_ltimer.o: ${S}/dev/lamebus/beep_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/beep_ltimer.c
+SRCS+=${S}/dev/lamebus/beep_ltimer.c
+OBJS+=beep_ltimer.o
+
+pseudorand_att.o: ${S}/dev/generic/pseudorand_att.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand_att.c
+SRCS+=${S}/dev/generic/pseudorand_att.c
+OBJS+=pseudorand_att.o
+
+sfs_vnode.o: ${S}/fs/sfs/sfs_vnode.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_vnode.c
+SRCS+=${S}/fs/sfs/sfs_vnode.c
+OBJS+=sfs_vnode.o
+
+sfs_fs.o: ${S}/fs/sfs/sfs_fs.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_fs.c
+SRCS+=${S}/fs/sfs/sfs_fs.c
+OBJS+=sfs_fs.o
+
+dumbvm.o: ${S}/arch/mips/mips/dumbvm.c
+	${COMPILE.c} ${S}/arch/mips/mips/dumbvm.c
+SRCS+=${S}/arch/mips/mips/dumbvm.c
+OBJS+=dumbvm.o
+
+sfs_io.o: ${S}/fs/sfs/sfs_io.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_io.c
+SRCS+=${S}/fs/sfs/sfs_io.c
+OBJS+=sfs_io.o
+
+cache_mips1.o: ${S}/arch/mips/mips/cache_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/cache_mips1.S
+SRCS+=${S}/arch/mips/mips/cache_mips1.S
+OBJS+=cache_mips1.o
+
+exception.o: ${S}/arch/mips/mips/exception.S
+	${COMPILE.S} ${S}/arch/mips/mips/exception.S
+SRCS+=${S}/arch/mips/mips/exception.S
+OBJS+=exception.o
+
+lamebus_mips.o: ${S}/arch/mips/mips/lamebus_mips.c
+	${COMPILE.c} ${S}/arch/mips/mips/lamebus_mips.c
+SRCS+=${S}/arch/mips/mips/lamebus_mips.c
+OBJS+=lamebus_mips.o
+
+interrupt.o: ${S}/arch/mips/mips/interrupt.c
+	${COMPILE.c} ${S}/arch/mips/mips/interrupt.c
+SRCS+=${S}/arch/mips/mips/interrupt.c
+OBJS+=interrupt.o
+
+pcb.o: ${S}/arch/mips/mips/pcb.c
+	${COMPILE.c} ${S}/arch/mips/mips/pcb.c
+SRCS+=${S}/arch/mips/mips/pcb.c
+OBJS+=pcb.o
+
+ram.o: ${S}/arch/mips/mips/ram.c
+	${COMPILE.c} ${S}/arch/mips/mips/ram.c
+SRCS+=${S}/arch/mips/mips/ram.c
+OBJS+=ram.o
+
+spl.o: ${S}/arch/mips/mips/spl.c
+	${COMPILE.c} ${S}/arch/mips/mips/spl.c
+SRCS+=${S}/arch/mips/mips/spl.c
+OBJS+=spl.o
+
+start.o: ${S}/arch/mips/mips/start.S
+	${COMPILE.S} ${S}/arch/mips/mips/start.S
+SRCS+=${S}/arch/mips/mips/start.S
+OBJS+=start.o
+
+switch.o: ${S}/arch/mips/mips/switch.S
+	${COMPILE.S} ${S}/arch/mips/mips/switch.S
+SRCS+=${S}/arch/mips/mips/switch.S
+OBJS+=switch.o
+
+syscall.o: ${S}/arch/mips/mips/syscall.c
+	${COMPILE.c} ${S}/arch/mips/mips/syscall.c
+SRCS+=${S}/arch/mips/mips/syscall.c
+OBJS+=syscall.o
+
+threadstart.o: ${S}/arch/mips/mips/threadstart.S
+	${COMPILE.S} ${S}/arch/mips/mips/threadstart.S
+SRCS+=${S}/arch/mips/mips/threadstart.S
+OBJS+=threadstart.o
+
+trap.o: ${S}/arch/mips/mips/trap.c
+	${COMPILE.c} ${S}/arch/mips/mips/trap.c
+SRCS+=${S}/arch/mips/mips/trap.c
+OBJS+=trap.o
+
+tlb_mips1.o: ${S}/arch/mips/mips/tlb_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/tlb_mips1.S
+SRCS+=${S}/arch/mips/mips/tlb_mips1.S
+OBJS+=tlb_mips1.o
+
+mips-setjmp.o: ${S}/../lib/libc/mips-setjmp.S
+	${COMPILE.S} ${S}/../lib/libc/mips-setjmp.S
+SRCS+=${S}/../lib/libc/mips-setjmp.S
+OBJS+=mips-setjmp.o
+
+copyinout.o: ${S}/lib/copyinout.c
+	${COMPILE.c} ${S}/lib/copyinout.c
+SRCS+=${S}/lib/copyinout.c
+OBJS+=copyinout.o
+
+array.o: ${S}/lib/array.c
+	${COMPILE.c} ${S}/lib/array.c
+SRCS+=${S}/lib/array.c
+OBJS+=array.o
+
+bitmap.o: ${S}/lib/bitmap.c
+	${COMPILE.c} ${S}/lib/bitmap.c
+SRCS+=${S}/lib/bitmap.c
+OBJS+=bitmap.o
+
+queue.o: ${S}/lib/queue.c
+	${COMPILE.c} ${S}/lib/queue.c
+SRCS+=${S}/lib/queue.c
+OBJS+=queue.o
+
+kheap.o: ${S}/lib/kheap.c
+	${COMPILE.c} ${S}/lib/kheap.c
+SRCS+=${S}/lib/kheap.c
+OBJS+=kheap.o
+
+kprintf.o: ${S}/lib/kprintf.c
+	${COMPILE.c} ${S}/lib/kprintf.c
+SRCS+=${S}/lib/kprintf.c
+OBJS+=kprintf.o
+
+kgets.o: ${S}/lib/kgets.c
+	${COMPILE.c} ${S}/lib/kgets.c
+SRCS+=${S}/lib/kgets.c
+OBJS+=kgets.o
+
+misc.o: ${S}/lib/misc.c
+	${COMPILE.c} ${S}/lib/misc.c
+SRCS+=${S}/lib/misc.c
+OBJS+=misc.o
+
+ntoh.o: ${S}/lib/ntoh.c
+	${COMPILE.c} ${S}/lib/ntoh.c
+SRCS+=${S}/lib/ntoh.c
+OBJS+=ntoh.o
+
+__printf.o: ${S}/../lib/libc/__printf.c
+	${COMPILE.c} ${S}/../lib/libc/__printf.c
+SRCS+=${S}/../lib/libc/__printf.c
+OBJS+=__printf.o
+
+snprintf.o: ${S}/../lib/libc/snprintf.c
+	${COMPILE.c} ${S}/../lib/libc/snprintf.c
+SRCS+=${S}/../lib/libc/snprintf.c
+OBJS+=snprintf.o
+
+atoi.o: ${S}/../lib/libc/atoi.c
+	${COMPILE.c} ${S}/../lib/libc/atoi.c
+SRCS+=${S}/../lib/libc/atoi.c
+OBJS+=atoi.o
+
+bzero.o: ${S}/../lib/libc/bzero.c
+	${COMPILE.c} ${S}/../lib/libc/bzero.c
+SRCS+=${S}/../lib/libc/bzero.c
+OBJS+=bzero.o
+
+memcpy.o: ${S}/../lib/libc/memcpy.c
+	${COMPILE.c} ${S}/../lib/libc/memcpy.c
+SRCS+=${S}/../lib/libc/memcpy.c
+OBJS+=memcpy.o
+
+memmove.o: ${S}/../lib/libc/memmove.c
+	${COMPILE.c} ${S}/../lib/libc/memmove.c
+SRCS+=${S}/../lib/libc/memmove.c
+OBJS+=memmove.o
+
+strcat.o: ${S}/../lib/libc/strcat.c
+	${COMPILE.c} ${S}/../lib/libc/strcat.c
+SRCS+=${S}/../lib/libc/strcat.c
+OBJS+=strcat.o
+
+strchr.o: ${S}/../lib/libc/strchr.c
+	${COMPILE.c} ${S}/../lib/libc/strchr.c
+SRCS+=${S}/../lib/libc/strchr.c
+OBJS+=strchr.o
+
+strcmp.o: ${S}/../lib/libc/strcmp.c
+	${COMPILE.c} ${S}/../lib/libc/strcmp.c
+SRCS+=${S}/../lib/libc/strcmp.c
+OBJS+=strcmp.o
+
+strcpy.o: ${S}/../lib/libc/strcpy.c
+	${COMPILE.c} ${S}/../lib/libc/strcpy.c
+SRCS+=${S}/../lib/libc/strcpy.c
+OBJS+=strcpy.o
+
+strlen.o: ${S}/../lib/libc/strlen.c
+	${COMPILE.c} ${S}/../lib/libc/strlen.c
+SRCS+=${S}/../lib/libc/strlen.c
+OBJS+=strlen.o
+
+strrchr.o: ${S}/../lib/libc/strrchr.c
+	${COMPILE.c} ${S}/../lib/libc/strrchr.c
+SRCS+=${S}/../lib/libc/strrchr.c
+OBJS+=strrchr.o
+
+strtok_r.o: ${S}/../lib/libc/strtok_r.c
+	${COMPILE.c} ${S}/../lib/libc/strtok_r.c
+SRCS+=${S}/../lib/libc/strtok_r.c
+OBJS+=strtok_r.o
+
+init.o: ${S}/dev/init.c
+	${COMPILE.c} ${S}/dev/init.c
+SRCS+=${S}/dev/init.c
+OBJS+=init.o
+
+device.o: ${S}/fs/vfs/device.c
+	${COMPILE.c} ${S}/fs/vfs/device.c
+SRCS+=${S}/fs/vfs/device.c
+OBJS+=device.o
+
+vfscwd.o: ${S}/fs/vfs/vfscwd.c
+	${COMPILE.c} ${S}/fs/vfs/vfscwd.c
+SRCS+=${S}/fs/vfs/vfscwd.c
+OBJS+=vfscwd.o
+
+vfslist.o: ${S}/fs/vfs/vfslist.c
+	${COMPILE.c} ${S}/fs/vfs/vfslist.c
+SRCS+=${S}/fs/vfs/vfslist.c
+OBJS+=vfslist.o
+
+vfslookup.o: ${S}/fs/vfs/vfslookup.c
+	${COMPILE.c} ${S}/fs/vfs/vfslookup.c
+SRCS+=${S}/fs/vfs/vfslookup.c
+OBJS+=vfslookup.o
+
+vfspath.o: ${S}/fs/vfs/vfspath.c
+	${COMPILE.c} ${S}/fs/vfs/vfspath.c
+SRCS+=${S}/fs/vfs/vfspath.c
+OBJS+=vfspath.o
+
+vnode.o: ${S}/fs/vfs/vnode.c
+	${COMPILE.c} ${S}/fs/vfs/vnode.c
+SRCS+=${S}/fs/vfs/vnode.c
+OBJS+=vnode.o
+
+devnull.o: ${S}/fs/vfs/devnull.c
+	${COMPILE.c} ${S}/fs/vfs/devnull.c
+SRCS+=${S}/fs/vfs/devnull.c
+OBJS+=devnull.o
+
+hardclock.o: ${S}/thread/hardclock.c
+	${COMPILE.c} ${S}/thread/hardclock.c
+SRCS+=${S}/thread/hardclock.c
+OBJS+=hardclock.o
+
+synch.o: ${S}/thread/synch.c
+	${COMPILE.c} ${S}/thread/synch.c
+SRCS+=${S}/thread/synch.c
+OBJS+=synch.o
+
+scheduler.o: ${S}/thread/scheduler.c
+	${COMPILE.c} ${S}/thread/scheduler.c
+SRCS+=${S}/thread/scheduler.c
+OBJS+=scheduler.o
+
+thread.o: ${S}/thread/thread.c
+	${COMPILE.c} ${S}/thread/thread.c
+SRCS+=${S}/thread/thread.c
+OBJS+=thread.o
+
+pid.o: ${S}/thread/pid.c
+	${COMPILE.c} ${S}/thread/pid.c
+SRCS+=${S}/thread/pid.c
+OBJS+=pid.o
+
+main.o: ${S}/main/main.c
+	${COMPILE.c} ${S}/main/main.c
+SRCS+=${S}/main/main.c
+OBJS+=main.o
+
+menu.o: ${S}/main/menu.c
+	${COMPILE.c} ${S}/main/menu.c
+SRCS+=${S}/main/menu.c
+OBJS+=menu.o
+
+loadelf.o: ${S}/userprog/loadelf.c
+	${COMPILE.c} ${S}/userprog/loadelf.c
+SRCS+=${S}/userprog/loadelf.c
+OBJS+=loadelf.o
+
+runprogram.o: ${S}/userprog/runprogram.c
+	${COMPILE.c} ${S}/userprog/runprogram.c
+SRCS+=${S}/userprog/runprogram.c
+OBJS+=runprogram.o
+
+uio.o: ${S}/userprog/uio.c
+	${COMPILE.c} ${S}/userprog/uio.c
+SRCS+=${S}/userprog/uio.c
+OBJS+=uio.o
+
+prog_syscall.o: ${S}/userprog/prog_syscall.c
+	${COMPILE.c} ${S}/userprog/prog_syscall.c
+SRCS+=${S}/userprog/prog_syscall.c
+OBJS+=prog_syscall.o
+
+getpid_syscall.o: ${S}/userprog/getpid_syscall.c
+	${COMPILE.c} ${S}/userprog/getpid_syscall.c
+SRCS+=${S}/userprog/getpid_syscall.c
+OBJS+=getpid_syscall.o
+
+arraytest.o: ${S}/test/arraytest.c
+	${COMPILE.c} ${S}/test/arraytest.c
+SRCS+=${S}/test/arraytest.c
+OBJS+=arraytest.o
+
+bitmaptest.o: ${S}/test/bitmaptest.c
+	${COMPILE.c} ${S}/test/bitmaptest.c
+SRCS+=${S}/test/bitmaptest.c
+OBJS+=bitmaptest.o
+
+queuetest.o: ${S}/test/queuetest.c
+	${COMPILE.c} ${S}/test/queuetest.c
+SRCS+=${S}/test/queuetest.c
+OBJS+=queuetest.o
+
+threadtest.o: ${S}/test/threadtest.c
+	${COMPILE.c} ${S}/test/threadtest.c
+SRCS+=${S}/test/threadtest.c
+OBJS+=threadtest.o
+
+tt3.o: ${S}/test/tt3.c
+	${COMPILE.c} ${S}/test/tt3.c
+SRCS+=${S}/test/tt3.c
+OBJS+=tt3.o
+
+synchtest.o: ${S}/test/synchtest.c
+	${COMPILE.c} ${S}/test/synchtest.c
+SRCS+=${S}/test/synchtest.c
+OBJS+=synchtest.o
+
+malloctest.o: ${S}/test/malloctest.c
+	${COMPILE.c} ${S}/test/malloctest.c
+SRCS+=${S}/test/malloctest.c
+OBJS+=malloctest.o
+
+fstest.o: ${S}/test/fstest.c
+	${COMPILE.c} ${S}/test/fstest.c
+SRCS+=${S}/test/fstest.c
+OBJS+=fstest.o
+
+autoconf.o: ${S}/compile/ASST2/autoconf.c
+	${COMPILE.c} ${S}/compile/ASST2/autoconf.c
+SRCS+=${S}/compile/ASST2/autoconf.c
+OBJS+=autoconf.o
+
diff --git a/kern/compile/ASST2/fork_syscall.o b/kern/compile/ASST2/fork_syscall.o
new file mode 100644
index 0000000..0d823cc
Binary files /dev/null and b/kern/compile/ASST2/fork_syscall.o differ
diff --git a/kern/compile/ASST2/fstest.o b/kern/compile/ASST2/fstest.o
new file mode 100644
index 0000000..d1fbe02
Binary files /dev/null and b/kern/compile/ASST2/fstest.o differ
diff --git a/kern/compile/ASST2/getpid_syscall.o b/kern/compile/ASST2/getpid_syscall.o
new file mode 100644
index 0000000..5327b1b
Binary files /dev/null and b/kern/compile/ASST2/getpid_syscall.o differ
diff --git a/kern/compile/ASST2/hardclock.o b/kern/compile/ASST2/hardclock.o
new file mode 100644
index 0000000..d6e7c5c
Binary files /dev/null and b/kern/compile/ASST2/hardclock.o differ
diff --git a/kern/compile/ASST2/init.o b/kern/compile/ASST2/init.o
new file mode 100644
index 0000000..d435c54
Binary files /dev/null and b/kern/compile/ASST2/init.o differ
diff --git a/kern/compile/ASST2/interrupt.o b/kern/compile/ASST2/interrupt.o
new file mode 100644
index 0000000..b102ddc
Binary files /dev/null and b/kern/compile/ASST2/interrupt.o differ
diff --git a/kern/compile/ASST2/kernel b/kern/compile/ASST2/kernel
new file mode 100755
index 0000000..cc94fb8
Binary files /dev/null and b/kern/compile/ASST2/kernel differ
diff --git a/kern/compile/ASST2/kgets.o b/kern/compile/ASST2/kgets.o
new file mode 100644
index 0000000..a6b899e
Binary files /dev/null and b/kern/compile/ASST2/kgets.o differ
diff --git a/kern/compile/ASST2/kheap.o b/kern/compile/ASST2/kheap.o
new file mode 100644
index 0000000..91bdffe
Binary files /dev/null and b/kern/compile/ASST2/kheap.o differ
diff --git a/kern/compile/ASST2/kprintf.o b/kern/compile/ASST2/kprintf.o
new file mode 100644
index 0000000..f37fcd6
Binary files /dev/null and b/kern/compile/ASST2/kprintf.o differ
diff --git a/kern/compile/ASST2/lamebus.o b/kern/compile/ASST2/lamebus.o
new file mode 100644
index 0000000..2163084
Binary files /dev/null and b/kern/compile/ASST2/lamebus.o differ
diff --git a/kern/compile/ASST2/lamebus_mips.o b/kern/compile/ASST2/lamebus_mips.o
new file mode 100644
index 0000000..8584530
Binary files /dev/null and b/kern/compile/ASST2/lamebus_mips.o differ
diff --git a/kern/compile/ASST2/lhd.o b/kern/compile/ASST2/lhd.o
new file mode 100644
index 0000000..97d0903
Binary files /dev/null and b/kern/compile/ASST2/lhd.o differ
diff --git a/kern/compile/ASST2/lhd_att.o b/kern/compile/ASST2/lhd_att.o
new file mode 100644
index 0000000..a1ec6bd
Binary files /dev/null and b/kern/compile/ASST2/lhd_att.o differ
diff --git a/kern/compile/ASST2/loadelf.o b/kern/compile/ASST2/loadelf.o
new file mode 100644
index 0000000..ddb4c5e
Binary files /dev/null and b/kern/compile/ASST2/loadelf.o differ
diff --git a/kern/compile/ASST2/lrandom.o b/kern/compile/ASST2/lrandom.o
new file mode 100644
index 0000000..8b1d1d7
Binary files /dev/null and b/kern/compile/ASST2/lrandom.o differ
diff --git a/kern/compile/ASST2/lrandom_att.o b/kern/compile/ASST2/lrandom_att.o
new file mode 100644
index 0000000..4b01598
Binary files /dev/null and b/kern/compile/ASST2/lrandom_att.o differ
diff --git a/kern/compile/ASST2/lser.o b/kern/compile/ASST2/lser.o
new file mode 100644
index 0000000..5f5075f
Binary files /dev/null and b/kern/compile/ASST2/lser.o differ
diff --git a/kern/compile/ASST2/lser_att.o b/kern/compile/ASST2/lser_att.o
new file mode 100644
index 0000000..38cf000
Binary files /dev/null and b/kern/compile/ASST2/lser_att.o differ
diff --git a/kern/compile/ASST2/ltimer.o b/kern/compile/ASST2/ltimer.o
new file mode 100644
index 0000000..9ca0934
Binary files /dev/null and b/kern/compile/ASST2/ltimer.o differ
diff --git a/kern/compile/ASST2/ltimer_att.o b/kern/compile/ASST2/ltimer_att.o
new file mode 100644
index 0000000..0dd0528
Binary files /dev/null and b/kern/compile/ASST2/ltimer_att.o differ
diff --git a/kern/compile/ASST2/ltrace.o b/kern/compile/ASST2/ltrace.o
new file mode 100644
index 0000000..74aca4a
Binary files /dev/null and b/kern/compile/ASST2/ltrace.o differ
diff --git a/kern/compile/ASST2/ltrace_att.o b/kern/compile/ASST2/ltrace_att.o
new file mode 100644
index 0000000..3e4b0ad
Binary files /dev/null and b/kern/compile/ASST2/ltrace_att.o differ
diff --git a/kern/compile/ASST2/machine b/kern/compile/ASST2/machine
new file mode 120000
index 0000000..c12f325
--- /dev/null
+++ b/kern/compile/ASST2/machine
@@ -0,0 +1 @@
+../../arch/mips/include
\ No newline at end of file
diff --git a/kern/compile/ASST2/main.o b/kern/compile/ASST2/main.o
new file mode 100644
index 0000000..ee4d7ab
Binary files /dev/null and b/kern/compile/ASST2/main.o differ
diff --git a/kern/compile/ASST2/malloctest.o b/kern/compile/ASST2/malloctest.o
new file mode 100644
index 0000000..60128e2
Binary files /dev/null and b/kern/compile/ASST2/malloctest.o differ
diff --git a/kern/compile/ASST2/memcpy.o b/kern/compile/ASST2/memcpy.o
new file mode 100644
index 0000000..d0cd0cd
Binary files /dev/null and b/kern/compile/ASST2/memcpy.o differ
diff --git a/kern/compile/ASST2/memmove.o b/kern/compile/ASST2/memmove.o
new file mode 100644
index 0000000..5565b6e
Binary files /dev/null and b/kern/compile/ASST2/memmove.o differ
diff --git a/kern/compile/ASST2/menu.o b/kern/compile/ASST2/menu.o
new file mode 100644
index 0000000..85cc683
Binary files /dev/null and b/kern/compile/ASST2/menu.o differ
diff --git a/kern/compile/ASST2/mips-setjmp.o b/kern/compile/ASST2/mips-setjmp.o
new file mode 100644
index 0000000..5508a78
Binary files /dev/null and b/kern/compile/ASST2/mips-setjmp.o differ
diff --git a/kern/compile/ASST2/misc.o b/kern/compile/ASST2/misc.o
new file mode 100644
index 0000000..7135698
Binary files /dev/null and b/kern/compile/ASST2/misc.o differ
diff --git a/kern/compile/ASST2/ntoh.o b/kern/compile/ASST2/ntoh.o
new file mode 100644
index 0000000..3118828
Binary files /dev/null and b/kern/compile/ASST2/ntoh.o differ
diff --git a/kern/compile/ASST2/opt-dumbvm.h b/kern/compile/ASST2/opt-dumbvm.h
new file mode 100644
index 0000000..7db9b01
--- /dev/null
+++ b/kern/compile/ASST2/opt-dumbvm.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_DUMBVM_H_
+#define _OPT_DUMBVM_H_
+#define OPT_DUMBVM 1
+#endif /* _OPT_DUMBVM_H_ */
diff --git a/kern/compile/ASST2/opt-net.h b/kern/compile/ASST2/opt-net.h
new file mode 100644
index 0000000..0340a83
--- /dev/null
+++ b/kern/compile/ASST2/opt-net.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NET_H_
+#define _OPT_NET_H_
+#define OPT_NET 0
+#endif /* _OPT_NET_H_ */
diff --git a/kern/compile/ASST2/opt-netfs.h b/kern/compile/ASST2/opt-netfs.h
new file mode 100644
index 0000000..cd21c56
--- /dev/null
+++ b/kern/compile/ASST2/opt-netfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NETFS_H_
+#define _OPT_NETFS_H_
+#define OPT_NETFS 0
+#endif /* _OPT_NETFS_H_ */
diff --git a/kern/compile/ASST2/opt-sfs.h b/kern/compile/ASST2/opt-sfs.h
new file mode 100644
index 0000000..94095ad
--- /dev/null
+++ b/kern/compile/ASST2/opt-sfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SFS_H_
+#define _OPT_SFS_H_
+#define OPT_SFS 1
+#endif /* _OPT_SFS_H_ */
diff --git a/kern/compile/ASST2/opt-synchprobs.h b/kern/compile/ASST2/opt-synchprobs.h
new file mode 100644
index 0000000..9114407
--- /dev/null
+++ b/kern/compile/ASST2/opt-synchprobs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SYNCHPROBS_H_
+#define _OPT_SYNCHPROBS_H_
+#define OPT_SYNCHPROBS 0
+#endif /* _OPT_SYNCHPROBS_H_ */
diff --git a/kern/compile/ASST2/pcb.o b/kern/compile/ASST2/pcb.o
new file mode 100644
index 0000000..2044c73
Binary files /dev/null and b/kern/compile/ASST2/pcb.o differ
diff --git a/kern/compile/ASST2/pid.o b/kern/compile/ASST2/pid.o
new file mode 100644
index 0000000..1a2846f
Binary files /dev/null and b/kern/compile/ASST2/pid.o differ
diff --git a/kern/compile/ASST2/prog_syscall.o b/kern/compile/ASST2/prog_syscall.o
new file mode 100644
index 0000000..9719a78
Binary files /dev/null and b/kern/compile/ASST2/prog_syscall.o differ
diff --git a/kern/compile/ASST2/pseudorand.o b/kern/compile/ASST2/pseudorand.o
new file mode 100644
index 0000000..11b67f2
Binary files /dev/null and b/kern/compile/ASST2/pseudorand.o differ
diff --git a/kern/compile/ASST2/pseudorand_att.o b/kern/compile/ASST2/pseudorand_att.o
new file mode 100644
index 0000000..aa03ca8
Binary files /dev/null and b/kern/compile/ASST2/pseudorand_att.o differ
diff --git a/kern/compile/ASST2/queue.o b/kern/compile/ASST2/queue.o
new file mode 100644
index 0000000..89aa183
Binary files /dev/null and b/kern/compile/ASST2/queue.o differ
diff --git a/kern/compile/ASST2/queuetest.o b/kern/compile/ASST2/queuetest.o
new file mode 100644
index 0000000..926a893
Binary files /dev/null and b/kern/compile/ASST2/queuetest.o differ
diff --git a/kern/compile/ASST2/ram.o b/kern/compile/ASST2/ram.o
new file mode 100644
index 0000000..14fa3c1
Binary files /dev/null and b/kern/compile/ASST2/ram.o differ
diff --git a/kern/compile/ASST2/random.o b/kern/compile/ASST2/random.o
new file mode 100644
index 0000000..2eb53c4
Binary files /dev/null and b/kern/compile/ASST2/random.o differ
diff --git a/kern/compile/ASST2/random_lrandom.o b/kern/compile/ASST2/random_lrandom.o
new file mode 100644
index 0000000..6c3fde9
Binary files /dev/null and b/kern/compile/ASST2/random_lrandom.o differ
diff --git a/kern/compile/ASST2/rtclock.o b/kern/compile/ASST2/rtclock.o
new file mode 100644
index 0000000..2d2092d
Binary files /dev/null and b/kern/compile/ASST2/rtclock.o differ
diff --git a/kern/compile/ASST2/rtclock_ltimer.o b/kern/compile/ASST2/rtclock_ltimer.o
new file mode 100644
index 0000000..68fc7cd
Binary files /dev/null and b/kern/compile/ASST2/rtclock_ltimer.o differ
diff --git a/kern/compile/ASST2/runprogram.o b/kern/compile/ASST2/runprogram.o
new file mode 100644
index 0000000..d5dec05
Binary files /dev/null and b/kern/compile/ASST2/runprogram.o differ
diff --git a/kern/compile/ASST2/scheduler.o b/kern/compile/ASST2/scheduler.o
new file mode 100644
index 0000000..39c7a48
Binary files /dev/null and b/kern/compile/ASST2/scheduler.o differ
diff --git a/kern/compile/ASST2/sfs_fs.o b/kern/compile/ASST2/sfs_fs.o
new file mode 100644
index 0000000..74beecb
Binary files /dev/null and b/kern/compile/ASST2/sfs_fs.o differ
diff --git a/kern/compile/ASST2/sfs_io.o b/kern/compile/ASST2/sfs_io.o
new file mode 100644
index 0000000..f966d9f
Binary files /dev/null and b/kern/compile/ASST2/sfs_io.o differ
diff --git a/kern/compile/ASST2/sfs_vnode.o b/kern/compile/ASST2/sfs_vnode.o
new file mode 100644
index 0000000..94aa0b0
Binary files /dev/null and b/kern/compile/ASST2/sfs_vnode.o differ
diff --git a/kern/compile/ASST2/snprintf.o b/kern/compile/ASST2/snprintf.o
new file mode 100644
index 0000000..51dae2e
Binary files /dev/null and b/kern/compile/ASST2/snprintf.o differ
diff --git a/kern/compile/ASST2/spl.o b/kern/compile/ASST2/spl.o
new file mode 100644
index 0000000..e0ad298
Binary files /dev/null and b/kern/compile/ASST2/spl.o differ
diff --git a/kern/compile/ASST2/start.o b/kern/compile/ASST2/start.o
new file mode 100644
index 0000000..321f45f
Binary files /dev/null and b/kern/compile/ASST2/start.o differ
diff --git a/kern/compile/ASST2/strcat.o b/kern/compile/ASST2/strcat.o
new file mode 100644
index 0000000..726a494
Binary files /dev/null and b/kern/compile/ASST2/strcat.o differ
diff --git a/kern/compile/ASST2/strchr.o b/kern/compile/ASST2/strchr.o
new file mode 100644
index 0000000..00928dc
Binary files /dev/null and b/kern/compile/ASST2/strchr.o differ
diff --git a/kern/compile/ASST2/strcmp.o b/kern/compile/ASST2/strcmp.o
new file mode 100644
index 0000000..3e8e4b2
Binary files /dev/null and b/kern/compile/ASST2/strcmp.o differ
diff --git a/kern/compile/ASST2/strcpy.o b/kern/compile/ASST2/strcpy.o
new file mode 100644
index 0000000..d8aa3d4
Binary files /dev/null and b/kern/compile/ASST2/strcpy.o differ
diff --git a/kern/compile/ASST2/strlen.o b/kern/compile/ASST2/strlen.o
new file mode 100644
index 0000000..b483bcb
Binary files /dev/null and b/kern/compile/ASST2/strlen.o differ
diff --git a/kern/compile/ASST2/strrchr.o b/kern/compile/ASST2/strrchr.o
new file mode 100644
index 0000000..67e39f6
Binary files /dev/null and b/kern/compile/ASST2/strrchr.o differ
diff --git a/kern/compile/ASST2/strtok_r.o b/kern/compile/ASST2/strtok_r.o
new file mode 100644
index 0000000..4f103b4
Binary files /dev/null and b/kern/compile/ASST2/strtok_r.o differ
diff --git a/kern/compile/ASST2/switch.o b/kern/compile/ASST2/switch.o
new file mode 100644
index 0000000..c2c2bfe
Binary files /dev/null and b/kern/compile/ASST2/switch.o differ
diff --git a/kern/compile/ASST2/synch.o b/kern/compile/ASST2/synch.o
new file mode 100644
index 0000000..484d742
Binary files /dev/null and b/kern/compile/ASST2/synch.o differ
diff --git a/kern/compile/ASST2/synchtest.o b/kern/compile/ASST2/synchtest.o
new file mode 100644
index 0000000..d83a870
Binary files /dev/null and b/kern/compile/ASST2/synchtest.o differ
diff --git a/kern/compile/ASST2/syscall.o b/kern/compile/ASST2/syscall.o
new file mode 100644
index 0000000..a8c8ed9
Binary files /dev/null and b/kern/compile/ASST2/syscall.o differ
diff --git a/kern/compile/ASST2/thread.o b/kern/compile/ASST2/thread.o
new file mode 100644
index 0000000..af0afaa
Binary files /dev/null and b/kern/compile/ASST2/thread.o differ
diff --git a/kern/compile/ASST2/threadstart.o b/kern/compile/ASST2/threadstart.o
new file mode 100644
index 0000000..29a8b46
Binary files /dev/null and b/kern/compile/ASST2/threadstart.o differ
diff --git a/kern/compile/ASST2/threadtest.o b/kern/compile/ASST2/threadtest.o
new file mode 100644
index 0000000..8213614
Binary files /dev/null and b/kern/compile/ASST2/threadtest.o differ
diff --git a/kern/compile/ASST2/tlb_mips1.o b/kern/compile/ASST2/tlb_mips1.o
new file mode 100644
index 0000000..a3bff48
Binary files /dev/null and b/kern/compile/ASST2/tlb_mips1.o differ
diff --git a/kern/compile/ASST2/trap.o b/kern/compile/ASST2/trap.o
new file mode 100644
index 0000000..24fc24d
Binary files /dev/null and b/kern/compile/ASST2/trap.o differ
diff --git a/kern/compile/ASST2/tt3.o b/kern/compile/ASST2/tt3.o
new file mode 100644
index 0000000..d8c6ee4
Binary files /dev/null and b/kern/compile/ASST2/tt3.o differ
diff --git a/kern/compile/ASST2/uio.o b/kern/compile/ASST2/uio.o
new file mode 100644
index 0000000..9fc33d7
Binary files /dev/null and b/kern/compile/ASST2/uio.o differ
diff --git a/kern/compile/ASST2/vers.c b/kern/compile/ASST2/vers.c
new file mode 100644
index 0000000..3382a7a
--- /dev/null
+++ b/kern/compile/ASST2/vers.c
@@ -0,0 +1,3 @@
+/* This file is automatically generated. Edits will be lost.*/
+const int buildversion = 21;
+const char buildconfig[] = "ASST2";
diff --git a/kern/compile/ASST2/vers.o b/kern/compile/ASST2/vers.o
new file mode 100644
index 0000000..82fc21f
Binary files /dev/null and b/kern/compile/ASST2/vers.o differ
diff --git a/kern/compile/ASST2/version b/kern/compile/ASST2/version
new file mode 100644
index 0000000..aabe6ec
--- /dev/null
+++ b/kern/compile/ASST2/version
@@ -0,0 +1 @@
+21
diff --git a/kern/compile/ASST2/vfscwd.o b/kern/compile/ASST2/vfscwd.o
new file mode 100644
index 0000000..ccbf08b
Binary files /dev/null and b/kern/compile/ASST2/vfscwd.o differ
diff --git a/kern/compile/ASST2/vfslist.o b/kern/compile/ASST2/vfslist.o
new file mode 100644
index 0000000..4327544
Binary files /dev/null and b/kern/compile/ASST2/vfslist.o differ
diff --git a/kern/compile/ASST2/vfslookup.o b/kern/compile/ASST2/vfslookup.o
new file mode 100644
index 0000000..8e67443
Binary files /dev/null and b/kern/compile/ASST2/vfslookup.o differ
diff --git a/kern/compile/ASST2/vfspath.o b/kern/compile/ASST2/vfspath.o
new file mode 100644
index 0000000..7e56456
Binary files /dev/null and b/kern/compile/ASST2/vfspath.o differ
diff --git a/kern/compile/ASST2/vnode.o b/kern/compile/ASST2/vnode.o
new file mode 100644
index 0000000..8e6fcad
Binary files /dev/null and b/kern/compile/ASST2/vnode.o differ
diff --git a/kern/conf/conf.kern b/kern/conf/conf.kern
index 7d7d9c9..5ea3add 100644
--- a/kern/conf/conf.kern
+++ b/kern/conf/conf.kern
@@ -365,6 +365,7 @@ file      thread/hardclock.c
 file      thread/synch.c
 file      thread/scheduler.c
 file      thread/thread.c
+file	  thread/pid.c
 
 #
 # Main/toplevel stuff
@@ -382,7 +383,8 @@ file      main/menu.c
 file      userprog/loadelf.c
 file      userprog/runprogram.c
 file      userprog/uio.c
-
+file	  userprog/prog_syscall.c  #Dargo Added
+file	  userprog/getpid_syscall.c
 #
 # Virtual memory system
 # (you will probably want to add stuff here while doing the VM assignment)
diff --git a/kern/include/kern/limits.h b/kern/include/kern/limits.h
index 480b980..35ca607 100644
--- a/kern/include/kern/limits.h
+++ b/kern/include/kern/limits.h
@@ -7,5 +7,6 @@
 /* Longest full path name */
 #define PATH_MAX   1024
 
+#define MAX_PROCS   256 /*Dargo Added */
 
 #endif /* _KERN_LIMITS_H_ */
diff --git a/kern/include/pid.h b/kern/include/pid.h
new file mode 100644
index 0000000..c56bcdd
--- /dev/null
+++ b/kern/include/pid.h
@@ -0,0 +1,18 @@
+#ifndef _PID_H_
+#define _PID_H_
+
+#include <types.h>
+
+int pid_allocate(pid_t *retval);
+
+//struct pidinfo *pid_create(pid_t pid, pid_t pid_parent);
+
+void pid_initialize();
+
+int waitpid(pid_t pid, int *returncode, int flags);
+
+void pidexit(int es);
+
+void pid_unallocate(pid_t p);
+
+#endif
diff --git a/kern/include/syscall.h b/kern/include/syscall.h
index 339514d..ccd37aa 100644
--- a/kern/include/syscall.h
+++ b/kern/include/syscall.h
@@ -4,8 +4,13 @@
 /*
  * Prototypes for IN-KERNEL entry points for system call implementations.
  */
-
+struct trapframe; //?
 int sys_reboot(int code);
 
+int sys_fork(struct trapframe *tf, pid_t *retval); /* Dargo Add */
+
+int sys_getpid(pid_t *retval);
+
+static void child_thread(void *vtf, unsigned long junk);
 
 #endif /* _SYSCALL_H_ */
diff --git a/kern/include/thread.h b/kern/include/thread.h
index 050fae1..5970666 100644
--- a/kern/include/thread.h
+++ b/kern/include/thread.h
@@ -7,9 +7,11 @@
 
 /* Get machine-dependent stuff */
 #include <machine/pcb.h>
+#include <types.h>
 
-
+//struct filetable;
 struct addrspace;
+struct array;
 
 struct thread {
 	/**********************************************************/
@@ -21,6 +23,9 @@ struct thread {
 	const void *t_sleepaddr;
 	char *t_stack;
 	
+	//struct filetable *t_filetable;
+	pid_t t_pid; 
+	
 	/**********************************************************/
 	/* Public thread members - can be used by other code      */
 	/**********************************************************/
@@ -61,7 +66,7 @@ void thread_shutdown(void);
 int thread_fork(const char *name, 
 		void *data1, unsigned long data2, 
 		void (*func)(void *, unsigned long),
-		struct thread **ret);
+		pid_t *childpid); //dargo added
 
 /*
  * Cause the current thread to exit.
diff --git a/kern/thread/pid.c b/kern/thread/pid.c
new file mode 100644
index 0000000..5b63ae0
--- /dev/null
+++ b/kern/thread/pid.c
@@ -0,0 +1,130 @@
+/* Dargo Created */
+
+#include <pid.h>
+#include <synch.h>
+#include <thread.h>
+#include <types.h>
+#include <lib.h>
+#include <curthread.h>
+#include <kern/limits.h>
+
+struct pidinfo {
+	pid_t pid;
+	pid_t pid_parent;
+	volatile int exited;
+	int exitstatus;
+	struct cv *pidcv;
+};
+
+//global variables
+static pid_t nextpid;
+static int allocated;
+static struct lock *pidlock;
+static struct pidinfo *pidinfoTable[MAX_PROCS];
+
+//pid allocate
+int pid_allocate(pid_t *retval)
+{
+	struct pidinfo *new_pidinfo;
+	pid_t pid;
+
+	lock_acquire(pidlock);
+	assert(allocated < MAX_PROCS);
+	assert(curthread->t_pid != 0);
+	
+	int pidinfo_index = nextpid % MAX_PROCS;
+	while (pidinfoTable[pidinfo_index] != NULL) {
+		nextpid++;
+		//if (nextpid > PID_MAX) 	  nextpid = PID_MIN;
+		pidinfo_index = nextpid % MAX_PROCS;
+	}
+	pid = nextpid;
+	nextpid++;
+	//if (nextpid > PID_MAX)    nextpid = PID_MIN;
+	//new_pidinfo = pid_create(pid, curthread->t_pid);
+	
+	        new_pidinfo = kmalloc(sizeof(struct pidinfo));
+	        new_pidinfo->pid = pid;
+	        new_pidinfo->pid_parent = curthread->t_pid;
+		new_pidinfo->exited = 0;
+		new_pidinfo->exitstatus = 0;
+		new_pidinfo->pidcv = cv_create("pid cv");
+
+	pidinfoTable[pid % MAX_PROCS] = new_pidinfo;
+	allocated++;
+	lock_release(pidlock);
+	*retval = pid;
+	return 0;
+}
+
+//pid create
+struct pidinfo* pid_create(pid_t pidIn, pid_t pid_parentIn)
+{	
+	struct pidinfo *p;
+	p = kmalloc(sizeof(struct pidinfo));
+	p->pid = pidIn;
+	p->pid_parent = pid_parentIn;
+	p->exited = 0;
+	p->exitstatus = 0;
+	p->pidcv = cv_create("pid cv");
+	return p;
+}
+
+//initialize pidinfotable
+void
+pid_initialize() {
+	pidlock = lock_create("pidlock");
+	int i;
+	for (i = 0; i < MAX_PROCS; i++) {
+		pidinfoTable[i] = NULL;
+	}
+	pidinfoTable[1] = pid_create(1, 0);
+	nextpid = 2;
+	allocated = 1;
+}	
+
+//Given pid, retrieve pidinfo from pidinfoTable 
+static struct pidinfo * pidget(pid_t p)
+{
+	struct pidinfo *pidi;
+	pidi = pidinfoTable[p];
+	return pidi;
+}
+
+//Add a new pidinfo into the pidinfoTable 
+static void pidadd(pid_t p, struct pidinfo *pi) 
+{
+	pidinfoTable[p % MAX_PROCS] = pi;
+	allocated++;
+}
+
+//Set exitstatus of pidinfo
+void pidexit(int es) 
+{
+	struct pidinfo *pi;
+	pi = pidget(curthread->t_pid);
+	pi->exitstatus = es;
+}
+
+//PID Unallocation
+void pid_unallocate(pid_t p)
+{
+	struct pidinfo *pi;
+	lock_acquire(pidlock);
+	pi = pidget(p);
+	pi->pid = 0;
+	pi->exitstatus = 0;
+	pi->exited = 0;
+	lock_release(pidlock);
+
+}
+
+//Destroy pidinfo
+static void pid_destroy(struct pidinfo *pi)
+{
+	pi->exited = 0;
+	pi->pid = 0;
+	cv_destroy(pi->pidcv);
+	kfree(pi);
+}
+
diff --git a/kern/thread/thread.c b/kern/thread/thread.c
index 137c8d7..f7001f9 100644
--- a/kern/thread/thread.c
+++ b/kern/thread/thread.c
@@ -13,6 +13,7 @@
 #include <addrspace.h>
 #include <vnode.h>
 #include "opt-synchprobs.h"
+#include <pid.h>
 
 /* States a thread can be in. */
 typedef enum {
@@ -61,7 +62,8 @@ thread_create(const char *name)
 	
 	// If you add things to the thread structure, be sure to initialize
 	// them here.
-	
+	thread->t_pid = 0;
+	//thread->t_filetable = NULL;	
 	return thread;
 }
 
@@ -232,7 +234,7 @@ int
 thread_fork(const char *name, 
 	    void *data1, unsigned long data2,
 	    void (*func)(void *, unsigned long),
-	    struct thread **ret)
+	    pid_t *childpid) /* Dargo Added */
 {
 	struct thread *newguy;
 	int s, result;
@@ -242,6 +244,18 @@ thread_fork(const char *name,
 	if (newguy==NULL) {
 		return ENOMEM;
 	}
+	
+	//****allocate new_pid for newguy
+	result = pid_allocate(&newguy->t_pid);
+	if (result) {
+                goto fail;
+        }	
+	//****copy curthread's fileTable to newguy
+	//filetable_copy(&newguy->t_filetable);	
+
+	//****copy curthread's vmspace to newguy
+	as_copy(curthread->t_vmspace, &newguy->t_vmspace);
+
 
 	/* Allocate a stack */
 	newguy->t_stack = kmalloc(STACK_SIZE);
@@ -311,9 +325,12 @@ thread_fork(const char *name,
 	 * done only with caution, because in general the child thread
 	 * might exit at any time.
 	 */
-	if (ret != NULL) {
-		*ret = newguy;
-	}
+	//if (ret != NULL) {
+	//	*ret = newguy;
+	//}
+
+	 //****set childpid to newguy's t_pid
+        *childpid = newguy->t_pid;
 
 	return 0;
 
diff --git a/kern/userprog/.loadelf.c.swp b/kern/userprog/.loadelf.c.swp
new file mode 100644
index 0000000..d72e42c
Binary files /dev/null and b/kern/userprog/.loadelf.c.swp differ
diff --git a/kern/userprog/:wq b/kern/userprog/:wq
new file mode 100644
index 0000000..415e49b
--- /dev/null
+++ b/kern/userprog/:wq
@@ -0,0 +1,37 @@
+/* Dargo Created */
+#include <kern/errno.h>
+#include <pid.h>
+#include <types.h>
+#include <syscall.h>
+#include <thread.h>
+#include <curthread.h>
+#include <machine/trapframe.h>
+#include <lib.h>
+//#include <file.h>
+
+// implementation of sys_fork()
+int
+sys_fork(struct trapframe *tf, pid_t *retval) {
+	
+	struct trapframe *new_tf;
+	new_tf = kmalloc(sizeof(struct trapframe));
+	new_tf = tf;
+	//call thread fork
+	int result = thread_fork(curthread->t_name, new_tf, 0, child_thread, retval);
+	if (result != 0) {
+		kfree(new_tf);
+		return result;
+	}
+	return 0;
+}
+
+static
+void
+child_thread(void *vtf, unsigned long junk) {
+	struct trapframe mytf; 
+	struct trapframe *ntf = vtf;
+	(void)junk;
+	mytf = *ntf;
+	kfree(ntf);
+	md_forkentry(&mytf);
+ }
diff --git a/kern/userprog/getpid_syscall.c b/kern/userprog/getpid_syscall.c
new file mode 100644
index 0000000..f20bd67
--- /dev/null
+++ b/kern/userprog/getpid_syscall.c
@@ -0,0 +1,36 @@
+/* 
+ * Xiao Qin:
+ * This is a sample implementation of the getpid system call.
+ *
+ * Note: 
+ * 1. You should put file related system calls in file_syscalls.c
+ *    and process related system calls in proc_syscalls.c
+ * 2. Add "file userprog/getpid_syscall.c" into src/kern/conf/conf.kern
+ * 3. The prototype sys_getpid() is declared in src/kern/include/syscall.h
+ * 4. sys_getpid() is invoked in src/kern/arch/mips/mips/syscall.c
+ */
+#include <types.h>
+#include <syscall.h>
+#include <thread.h>
+#include <curthread.h>
+#include <pid.h>
+/* 
+ * You may need the following four head files to 
+ * implement other process related system calls.
+ */
+/*#include <kern/errno.h>
+#include <lib.h>
+#include <pid.h>
+#include <machine/trapframe.h>
+*/
+
+/*
+ * Sample implementation of sys_getpid(), which is called in 
+ * src/kern/arch/mips/mips/syscall.c
+ */
+int
+sys_getpid(pid_t *retval)
+{
+	*retval = curthread->t_pid;
+	return 0;
+}
diff --git a/kern/userprog/prog_syscall.c b/kern/userprog/prog_syscall.c
new file mode 100644
index 0000000..415e49b
--- /dev/null
+++ b/kern/userprog/prog_syscall.c
@@ -0,0 +1,37 @@
+/* Dargo Created */
+#include <kern/errno.h>
+#include <pid.h>
+#include <types.h>
+#include <syscall.h>
+#include <thread.h>
+#include <curthread.h>
+#include <machine/trapframe.h>
+#include <lib.h>
+//#include <file.h>
+
+// implementation of sys_fork()
+int
+sys_fork(struct trapframe *tf, pid_t *retval) {
+	
+	struct trapframe *new_tf;
+	new_tf = kmalloc(sizeof(struct trapframe));
+	new_tf = tf;
+	//call thread fork
+	int result = thread_fork(curthread->t_name, new_tf, 0, child_thread, retval);
+	if (result != 0) {
+		kfree(new_tf);
+		return result;
+	}
+	return 0;
+}
+
+static
+void
+child_thread(void *vtf, unsigned long junk) {
+	struct trapframe mytf; 
+	struct trapframe *ntf = vtf;
+	(void)junk;
+	mytf = *ntf;
+	kfree(ntf);
+	md_forkentry(&mytf);
+ }
diff --git a/testbin/getpidtest/.cvsignore b/testbin/getpidtest/.cvsignore
new file mode 100644
index 0000000..95a1730
--- /dev/null
+++ b/testbin/getpidtest/.cvsignore
@@ -0,0 +1 @@
+forktest
diff --git a/testbin/getpidtest/Makefile b/testbin/getpidtest/Makefile
new file mode 100644
index 0000000..36e171e
--- /dev/null
+++ b/testbin/getpidtest/Makefile
@@ -0,0 +1,9 @@
+# Makefile for getpidtest
+
+SRCS=getpidtest.c
+PROG=getpidtest
+BINDIR=/testbin
+
+include ../../defs.mk
+include ../../mk/prog.mk
+
diff --git a/testbin/getpidtest/depend.mk b/testbin/getpidtest/depend.mk
new file mode 100644
index 0000000..5ba124e
--- /dev/null
+++ b/testbin/getpidtest/depend.mk
@@ -0,0 +1,15 @@
+
+forktest.o: \
+ forktest.c \
+ $(OSTREE)/include/unistd.h \
+ $(OSTREE)/include/sys/types.h \
+ $(OSTREE)/include/machine/types.h \
+ $(OSTREE)/include/kern/types.h \
+ $(OSTREE)/include/kern/unistd.h \
+ $(OSTREE)/include/kern/ioctl.h \
+ $(OSTREE)/include/string.h \
+ $(OSTREE)/include/stdlib.h \
+ $(OSTREE)/include/stdio.h \
+ $(OSTREE)/include/stdarg.h \
+ $(OSTREE)/include/err.h
+
diff --git a/testbin/getpidtest/forktest b/testbin/getpidtest/forktest
new file mode 100755
index 0000000..36a7713
Binary files /dev/null and b/testbin/getpidtest/forktest differ
diff --git a/testbin/getpidtest/forktest.o b/testbin/getpidtest/forktest.o
new file mode 100644
index 0000000..8e8204e
Binary files /dev/null and b/testbin/getpidtest/forktest.o differ
diff --git a/testbin/getpidtest/getpidtest b/testbin/getpidtest/getpidtest
new file mode 100755
index 0000000..8dd0ee5
Binary files /dev/null and b/testbin/getpidtest/getpidtest differ
diff --git a/testbin/getpidtest/getpidtest.c b/testbin/getpidtest/getpidtest.c
new file mode 100644
index 0000000..196873f
--- /dev/null
+++ b/testbin/getpidtest/getpidtest.c
@@ -0,0 +1,9 @@
+#include <unistd.h>
+#include <stdio.h>
+
+int main() {
+	int mypid;
+	mypid = getpid();
+	reboot(RB_REBOOT);
+	return 0;
+}
diff --git a/testbin/getpidtest/getpidtest.o b/testbin/getpidtest/getpidtest.o
new file mode 100644
index 0000000..6d10246
Binary files /dev/null and b/testbin/getpidtest/getpidtest.o differ
